{"version":3,"sources":["components/CreateAccountForm/CreateAccountForm.js","components/LoginForm/LoginForm.js","components/LoginSide/LoginSide.js","components/InfoSide/InfoSide.js","App.js","registerServiceWorker.js","index.js"],"names":["CreateAccountForm","React","Component","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","TextField_default","id","label","placeholder","className","margin","autoFocus","LoginSide","CreateAccountForm_CreateAccountForm","InfoSide","App","InfoSide_InfoSide_InfoSide","LoginSide_LoginSide_LoginSide","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.1bd42b41.chunk.js","sourcesContent":["import React from 'react'\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nexport class CreateAccountForm extends React.Component{\r\n    render(){\r\n        return (\r\n            <TextField\r\n            id=\"SSID Text Field\"\r\n            label=\"\"\r\n            placeholder=\"\"\r\n            className=\"SSID Text Field\"\r\n            margin=\"normal\"\r\n            autoFocus\r\n            />\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nexport class LoginForm extends React.Component{\r\n    render(){\r\n        return (\r\n            <TextField\r\n                id=\"SSID Text Field\"\r\n                label=\"SSID\"\r\n                placeholder=\"\"\r\n                className=\"SSID Text Field\"\r\n                margin=\"normal\"\r\n                autoFocus\r\n            />\r\n\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './LoginSide.css';\r\nimport {LoginForm} from \"../LoginForm/LoginForm\";\r\nimport {CreateAccountForm} from '../CreateAccountForm/CreateAccountForm';\r\n\r\nexport class LoginSide extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"LoginSide\">\r\n                <div className=\"TitleSpace\">\r\n                    <h1 className=\"TitleText\">Sign in/out of the Makerspace</h1>\r\n                </div>\r\n                <div className=\"LowerHalf\">\r\n                    <div className=\"LoginFormDiv\">\r\n                        <CreateAccountForm />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './InfoSide.css'\r\n\r\nexport class InfoSide extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"InfoSide\">\r\n                [Content Under Construction]\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport {LoginSide} from './components/LoginSide/LoginSide'\nimport {InfoSide} from './components/InfoSide/InfoSide'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <div className=\"split infoSide\">\n            <InfoSide />\n          </div>\n          <div className=\"split loginSide\">\n            <LoginSide />\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}